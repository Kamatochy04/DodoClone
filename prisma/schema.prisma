generator client {
    provider    = "prisma-client-js"
}

datasource db {
    provider    = "postgresql"
    url         = env("POSTGRES_URL")
    directUrl   = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id          Int @id @default(autoincrement())

    fullName    String 
    email       String  @unique
    password    String
    role        UserRole          @default(USER)
    verified    DateTime 

    cart        Cart?
    orders      Order[]
    verificationCode    VerificationCode?        

    provider    String?
    providerId  String?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Product {
    id          Int @id @default(autoincrement())
        
    name        String
    imageUrl    String

    category    Category @relation(fields: [categoryId], references: [id])
    categoryId  Int

    ingredients Ingredient[]
    variants    ProductItem[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Category {
    id          Int @id @default(autoincrement())
    name        String @unique
    products    Product[]     
}

model Ingredient {
    id          Int @id @default(autoincrement())

    name        String
    price       Float
    imageUrl    String

    product     Product[]  
    cartItems   CartItem[]

    createdAt   DateTime @default(now())
    updataAt    DateTime @updatedAt
}

model ProductItem {
    id          Int @id @default(autoincrement())

    price       Int
    size        Int?
    pizzaType   Int?

    product Product @relation(fields: [productId], references: [id])
    productId   Int
    cartItems   CartItem[]    
}

model Cart {
    id          Int @id @default(autoincrement())

    userId Int  @unique
    user   User? @relation(fields: [userId], references: [id])

    items       CartItem[]

    token       String

    totalAumount    Int @default(0)

    createdAt   DateTime @default(now())
    updataAt    DateTime @updatedAt
}

model CartItem {
    id          Int @id @default(autoincrement())

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId   Int

    cart        Cart @relation(fields: [cartId], references: [id])
    cartId      Int

    quantity    Int

    ingredients Ingredient[]

    createdAt   DateTime @default(now())
    updataAt    DateTime @updatedAt
}

model Order {
  id            Int @id @default(autoincrement())

  userId        Int @unique
  user          User? @relation(fields: [userId], references: [id])

  token         String

  status        OrderStatus @default(PENDING)
  totalAmount   Int
  paymentId     String?

  items         Json

  fullName      String
  email         String
  adress        String
  phone         String
  comment       String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationCode {
  id            Int @id @default(autoincrement())

  userId        Int  @unique
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}